1.)
a)
n = 697, a_1 = 132
n - 1 = 696 = 2³ * 87

696 | 2
348 | 2
174 | 2
 87 | 2

132^(87) mod 697 = 565 != 1 | -1
132^(2*87) mod 697 = 696 = -1

ist prim

697 ist zumindest zu 75% eine primzahl
697 ist zu maximal 25% eine zusammengesetzte Zahl

b)
n = 697, a_1 = 132, a_2 = 355, a_3 = 383, a_4 = 202, a_5 = 565

132^(87) mod 697 = 565 != 1 | -1
132^(2*87) mod 697 = 696 = -1

355^(87) mod 697 = 161
355^(2*87) mod 697 = 132
355^(2*2*87) mod 697 = -1

383^(87) mod 697 = 495
383^(2*87) mod 697 = 378
383^(2*2*87) mod 697 = -1

202^(87) mod 697 = 314
202^(2*87) mod 697 = 319
202^(2*2*87) mod 697 = -1

565^(87) mod 697 = 132
565^(2*87) mod 697 = -1

ist prim

c)
113^(87) mod 697 = 105
113^(2*87) mod 697 = 570
113^(2*2*87) mod 697 = 98
113^(2*2*2*87) mod 697 = 543
113^(2*2*2*2*87) mod 697 = 18
113^(2*2*2*2*2*87) mod 697 = 324
113^(2*2*2*2*2*87) mod 697 = 426

ist NICHT prim

2.)
n = 25, a = 1 -> 24
# siehe uebung11.py

Zeugen:
1, 7, 18, 24

4/24 = 1/8

#2,5,7,11,13,17,19,23



3.)
10⁻⁷ = (1/4)^n     | log
-7 * log(10) = n * log(1/4)
(-7*log(10))/log(1/4) = n
n = ...


4.)
x / ln(x) < pi(x) < 1.25506 * x / ln(x)
2 ^ 2048 = pow(2,2048)

2.2765422068095172052231028887086894520663597198407788763553... × 10^613
bis 
2.857200000000000×10^613


5.)
time openssl prime -generate -bits 1024
time openssl prime -generate -bits 2048
time openssl prime -generate -bits 4096
time openssl prime -generate -bits 8192 - 42s
time openssl prime -generate -bits 8193 - 64.39s

6.)
https://github.com/openssl/openssl/blob/master/crypto/bn/bn_prime.c
Womöglich wäre "-checks num" dafür da, in der man-page steht aber "This parameter is ignored"
Zeile 88 - 64 rounds

