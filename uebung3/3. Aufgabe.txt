0.)
E ′ ist ebenfalls semantisch sicher. Angenommen, es gäbe einen Angreifer A′ auf E ′ . A′ würde m0 und m1 wählen und dann mit nicht
vernachlässigbarem Vorteil erkennen, welche der beiden Nachrichten verschlüsselt wurde. Wir beschreiben nun einen Angreifer A auf das sichere
Verfahren E , der ebenfalls nicht vernachlässigbaren Vorteil hat. A lässt A′ mit seinem Angriff beginnen. A nimmt die beiden Nachrichten, die A′
wählt und lässt vom Challenger eine der beiden verschlüsseln. Das Chiffrat wird nun reversiert und A′ gezeigt. A′ kann mit nicht
vernachlässigbarem Vorteil erkennen, welche Nachricht verschlüsselt wurde. A antwortet genau so. Sein Vorteil gegenüber E ist genauso groß wie der
Vorteil von A′ gegenüber E ′ . D.h. bereits E wäre unsicher.

1.)
Reduktionsverfahren
Gleich wie 0 nur das die Nachricht reversiert wird, was allerdings den selben Effekt hat.

2.)
m0: 1010 1010 -> 1
m1: 1010 1000 -> 0
A wählt zwei Nachrichten, eine mit parity 1 und eine mit parity 0. Da bitweise XOR gemacht wird kann zu 100% festgestellt werden welche Nachricht verschlüsselt wurde.
Vorteil 100% -> 1

3.)
m0: 1111 1111
m1: 0000 0000
A wählt zwei Nachrichten, eine mit nur 1n und eine mit nur 0n. Da bits nur getauscht werden wird bei der zurückkommenden Nachricht erkannt welche Nachricht verschlüsselt wurde.
Vorteil 100% -> 1

4.)
m0: 0000...0000
m1: 1111...1111
A wählt zwei Nachrichten, eine mit nur 1n und eine mit nur 0n. Je länger beide Nachrichten sind, desto näher kommt man an eine Verteilung von 4/6 zwischen 0n und 1n. Wenn mehr 1n sind, dann nachricht m0, wenn mehr 0n dann nachricht m1.
Vorteil:
Wenn Nachricht lange genug, dann ist Wahrscheinlichkeit das Angreifer nicht sagen kann welche Nachricht entschlüsselt wurde 0 -> Vorteil 100% -> 1

5.)
1010
1101 -> 0
0110 -> 1
0011 -> 0
1001 -> 1
0100 -> 1
0010 -> 0
0001 -> 0
1000 -> 1
1100 -> 0
1110 -> 0
1111 -> 0
0111 -> 1
1011 -> 1
0101 -> 1
1010 -> 1
1101 -> 0
...
Alle 16 bit wiederholt sich die Stromchiffre
Alle 4 bit als key können ausprobiert werden -> Entropie zu klein
Vorteil: 100% -> 1

6.)
Input: m0 und m1
Verfahren:
	Gzip
	ChaCha
	9023a77c49631c74210eb730e4c4c820
	514c2c0a026d730097c0f85d4d501e1c
Angreifer kann eine Nachricht mit gleichen Zeichen und eine Nachricht mit unterschiedlichen Zeichen nehmen. Da das Kompressionsverfahren die Nachricht mit dem gleichen Zeichen stark kürzt kann der Angreifer klar erkennen welche Nachricht verlüsselt wurde.
Vorteil 100% -> 1




